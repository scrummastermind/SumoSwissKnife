{
	"_collector": "_collector=\"$0\"",
	"_format": "_format as ${1:<field>}",
	"_messageCount": "_messageCount as ${1:<field>}",
	"_messageTime": "_messageTime as ${1:<field>}\n",
	"_receiptTime": "_receiptTime as ${1:<field>}",
	"_size": "_size as ${1:<field>}",
	"_sourceCategory": "_sourceCategory=\"${1:<string>}\"",
	"_sourceHost": "_sourceHost=\"${1:<string>}\"",
	"_sourceName": "_sourceName=\"${1:<string>}\"",
	"_source": "_source=\"${1:<string>}\"",
	"Luhn": "luhn(${1:<cc_num_field_or_string>}) as ${2:<field>}",
	"abs": "abs(${1:<field>}) as ${1:<field>}",
	"acos": "acos(${1:<radians_angle>}) as ${2:<field>}",
	"asin": "asin(${1:<radians_angle>}) as ${2:<field>}",
	"sin": "sin(${1:<radians_angle>}) as ${2:<field>}",
	"compareCIDRPrefix": "compareCIDRPrefix(${1:<IP_string_or_filed_1>}, ${2:<IP_string_or_filed_2>}, toInt(${3:prefix_length is an integer (0-32)}))\n",
	"isBlank": "isBlank(${1:<string_field>})\n",
	"isEmpty": "isEmpty(${1:<string_field>})\n",
	"isNull": "isNull(${1:<any_type_field>})\n",
	"isNumeric": "isNumeric(${1:<string_field>})\n",
	"isPrivateIP": "isPrivateIP(${1:<IPv4_string_field>})\n",
	"isPublicIP": "isPublicIP(${1:<IPv4_string_field>})\n",
	"isValidIP": "isValidIP(${1:<IP_string_field>})\n",
	"isValidIPv4": "isValidIPv4(${1:<IP_string_field>})\n",
	"isValidIPv6": "isValidIPv6(${1:<IP_string_field>})\n",
	"accum": "accum ${1:<filed>} as total_of_$1 by ${2:<aggregating_field>}\n",
	"avg": "avg(${1:<numerical_field>}) as ${2:field} ${3:group} by ${4:<aggregating_field>}\n",
	"backshift": "backshift ${1:<field>}, ${2:<shift_length>}\n",
	"base64Decode": "base64Decode(\"${1:<string_or_fiel>}\"${2:,\"<encoding> UTF-8 (default)\"}) as ${3:<field>}\n",
	"base64Encode": "base64Encode(${1:<string_field>}) as ${2:<field>}\n",
	"concat": "concat(${1:<one_or_more_fields_or_strings>},${2:<field_or_string>}) as ${3:<field>}\n",
	"count": "count by ${1:<one_or_more_fields>},${2:<field>}\n",
	"formatDate": "formatDate(fromMillis(toLong(${1:<date_time_field_in_milliseconds>})), ${2:<Java_based_date_format_string such as yyyy-MM-dd>}, ${3:ISO TimeZone such as GMT}) as formatted_$1\n",
	"format": "format(\"${1:format_specifier}\", ${2:<field_1>}, ${3: as many fields as to match the format place .....}) as ${4:<field>}\n",
	"getCIDRPrefix": "getCIDRPrefix(${1:<IP_string_or_filed>}, toInt(${3:prefix_length is an integer (0-32)})) as ${1:<field>}\n",
	"if": "if(${1:<condition>}, ${2:<value_if_true>}, ${3:<value_if_false>}) as ${4:<field>}\n",
	"json": "json ${1:auto} field=${2:<optional_fiel_to_json_parse>} \"${3:<name_or_key>}\", \"${4:<name_or_key,... as many keys as needed to match>}\"",
	"maskFromCIDR": "maskFromCIDR(toInt(\"${1:prefix_length is an integer (0-32)}\")) as ${2:<field>}\n",
	"matching states - transaction": "//Sumo Transaction: https://bit.ly/345OcSX\n\n| transaction on ${1:<one_or_more_fields>}\n\t\t\t   with \"*${2:some_string_to_match}*\" as ${3:state_names_1_to_n_multi_comma_seperated_lines}\n\t\t\t   in ${4:<field>}\n\t\t\t   results by ${5:transactions}${6:states}${7:flow${8:\n| count by fromstate, tostate}}\n",
	"merge": "merge ${1:<one_or_more_fields>} ${2:takeFirst}${3:takeLast}${4:join with \"${5:some delimetr such as , or \\n etc.}}\"",
	"parse regex": "parse regex field=${1:<optional_fiel_to_json_parse>} \"${2:<start_expression>}(?<${3:<field_name>}>${4:<regex_string_group_expression>})${5:<end_expression>}\"${6: multi}${7: nodrop}\n",
	"parseDate": "parseDate(${1:<date_string_or_field>}, ${2:<Java_based_date_format_string such as yyyy-MM-dd>}, \"${3:ISO TimeZone such as GMT}\") as $1_as_datetime\n",
	"parse": "parse regex field=${1:<optional_fiel_to_json_parse>} \"${2:<start_string>}*${3:<end_expression>}\" as ${4:<field_1 ... as many * in the expression>}${5: nodrop}\n",
	"predefined states - transaction": "//Sumo Transaction: https://bit.ly/345OcSX\n\n| transaction on ${1:<one_or_more_fields>}\n\t\t\t   with states ${2:state_names_1_to_n_multi_comma_seperated_fields}\n\t\t\t   in ${3:<field>}\n\t\t\t   results by ${5:transactions}${6:states}${7:flow${8:\n| count by fromstate, tostate}}\n",
	"subquery": "[subquery from=(${1:<optional_fromTime>}) to=(${2:<optional_toTime>}) :\n\n\t${3:<child query>}\n\t| compose ${4:<field_1>}, ${5:<field_2>...}\tmaxresults=${6:<optional_maxresults>} ${7:keywords}\n\n]\n",
	"ternary": "${1:<field>} = ${2:<condition>} ? ${3:<value_if_true>} : ${4:<value_if_false}\n",
	"timeslice": "timeslice ${1:#}${2:s|m|h|d|w}${3: buckets}\n",
	"tourl": "tourl(${1:<url_column_name>}, \"${2:<url_short_name_field_or_string>}\"${3:, ${4:<url_short_name_prefix>}}${5:, ${6:<url_short_name_suffix>}}) as ${7:<field>}\n",
	"transactionize": "transactionize ${1:<one_or_more_fields>}(merge ${1:<one_or_more_fields>} ${2:takeFirst}${3:takeLast}${4:join with \"${5:some delimetr such as , or \\n etc.}}\")\n",
	"transpose": "transpose row ${1:<one_or_fields_as_rows>} column ${2:<one_or_more_fields_pivoted_as_columns>}\n",
	"urldecode": "urldecode(${:1<encoded_url_field_or_string>}) as ${2:<field>}\n"
}