{
  "metadata":"_collector,_source,_sourceCategory,_sourceHost,_sourceName,_raw,_receiptTime,_messageCount,_messageId,_messageTime,_size,_format,_sourceId,_collectorId,_blockId",
  "keyword_operator":"AND,OR,|","operator":"parse \"\",parse regex \"\",where,count,count_distinct,count_frequent,sum,avg,stddev,last,first,max,min,pct,sort by,top,topk,limit,timeslice,accum,diff,total,lookup,smooth,rollingstd,backshift,summarize,logreduce,logcompare,extract \"\",parse \"\" nodrop,parse regex \"\" nodrop,keyvalue,keyvalue auto,fields,json,json auto,sessionize,trace,transpose,urldecode,getCIDRPrefix,compareCIDRPrefix,maskFromCIDR,isValidIP,isValidIPv4,isValidIPv6,isPrivateIP,isPublicIP,isNull,isEmpty,isBlank,isNumeric,floor,ceil,concat,format,toUpperCase,toLowerCase,ipv4ToNumber,csv,split,save,luhn,parse xml \"\",parse xml \"\" nodrop,substring,replace,transaction,transactionize,predict,outlier,fillmissing,length, parseHex,compare,queryTimeRange(),queryStartTime(),queryEndTime(),urlencode,tourl,contains,hexToDec,decToHex,base64Encode,base64Decode,hexToAscii,filter,compose",
"operator_validation":"int,parse,where,count,count_distinct,count_distinct_approx,count_frequent,sum,avg,stddev,last,first,max,min,pct,group,by,order,sort,top,top_all_fields,limit,timeslice,accum,diff,total,lookup,smooth,rollingstd,backshift,summarize,logreduce,logcompare,extract,details,if,num,number,round,toDouble,toInt,toLong,toNum,toNumber,toString,formatDate,now,keyvalue,kv,fields,cat,save,json,sessionize,trace,pivot,transpose,urldecode,getCIDRPrefix,compareCIDRPrefix,maskFromCIDR,isValidIP,isValidIpv4,isValidIPv6,isPrivateIP,isPublicIP,isNull,isEmpty,isBlank,isNumeric,floor,ceil,join,concat,format,toUpperCase,toLowerCase,ipv4ToNumber,csv,split,luhn,substring,replace,abs,sqrt,cbrt,exp,expm1,log,log10,log1p,sin,cos,tan,acos,atan,atan2,sinh,cosh,tanh,hypot,signum,toDegrees,toRadians,metricad,transaction,transactionize,predict,outlier,length,parseHex,double,compare,contains,hexToDec,decToHex,base64Encode,base64Decode,hexToAscii,filter"
}

{
  "description_sourceCategory":"Search logs across devices or host using the category tag you defined (ex: _sourceCategory=Apache)", "description_sourceName":"Search messages within a source file (s) using the file path tag (ex: _sourceName=path/to/file)", "description_sourceHost":"Search messages across sources associated with the hostname tag defined (ex: _sourceHost=USEast*)", "description_collector":"Search messages from a given collector (ex: _collector=SyslogCollector1)", "description_index":"Search messages from a given index (ex: _index=allDump)", "description_view":"Search messages from a given scheduled view (ex: _view=customer_ingest)", "description_source":"Search messages from a given source (ex: _source=log1 or _source=log*)", "description_parse":"Parse a message and create one or more new field labels", "description_parse_regex":"Extract complex data to create field labels", "description_parse_nodrop":"Parse and include messages that do not match the parse term", "description_parse_regex_nodrop":"Parse using regex and include messages that do not match the parse term", "description_extract":"Extract complex data to create field labels", "description_where":"Conditional operator for filtering search results", "description_count":"Counts total number of messages that match keyword", "description_count_distinct":"Counts only distinct occurrences of value matched ", "description_count_frequent":"Counts frequent occurrences of value matched ", "description_sum":"Sums values of the numerical field being evaluated", "description_avg":"Calculates average value of the numerical field being evaluated", "description_stddev":"Finds the standard deviation value for a distribution of numerical values", "description_last":"Most recent value of the field being evaluated within the time range", "description_first":"Oldest value of the field being evaluated", "description_max":"Maximum value of the numerical field being evaluated within the time range analyzed", "description_min":"Minimum value of the numerical field being evaluated within the time range.", "description_pct":"Percentile value of any field being evaluated within the time range.", "description_sort":"Orders aggregate search results", "description_order":"Orders aggregate search results.  A synonym for sort.", "description_top":"Limit # of sorted results to most or highest per group-by function", "description_topk":"Find top fields based on a given sort order", "description_compose":"Specify which fields you want to pass back from the child/sub query to the parent query", "description_limit":"Limit # of results returned ", "description_timeslice":"Segment data by time periods or bucketed over time range", "description_diff":"Calculate difference between consecutive rows", "description_accum":"Cumulative sum", "description_total":"Column total", "description_summarize":"Cluster messages based on pattern similarites", "description_logreduce":"Cluster messages based on pattern similarites", "description_logcompare":"Compare messages and display the changes in patterns from one point of time to another", "description_predict":"Predict a time series sequence of numeric data", "description_outlier":"Identify outliers in a time series sequence of numeric data", "description_smooth":"Running average on numeric data.", "description_rollingstd":"Running standard deviation on numeric data.", "description_backshift":"Lagged or backshifted data series.", "description_keyvalue":"Extract values from key-value pairs", "description_keyvalue_auto":"Automatically extract keys and values from key-value pairs", "description_lookup":"Lookup fields from an outside source", "description_fields":"Specify which fields to include in the result", "description_cat":"Load the results of a previously saved search query", "description_save":"Save the result of this search query", "description_json":"Extract values from JSON", "description_json_auto":"Automatically extract values from JSON", "description_transpose":"Transpose aggregated results", "description_sessionize":"Find correlating values in disparate logs", "description_trace":"Retrieve activity associated with a value", "description_urldecode":"Decode URL parameter values", "description_getCIDRPrefix":"Produces the CIDR prefixes of parsed IP addresses", "description_compareCIDRPrefix":"Returns boolean results, where true indicates that prefixes are the same; false indicates that prefixes are different", "description_maskFromCIDR":"Returns an IP address subnet mask", "description_isValidIP":"Returns true if the input is a valid IP address", "description_isValidIPv4":"Returns true if the input is a valid IPv4 address", "description_isValidIPv6":"Returns true if the input is a valid IPv6 address", "description_isPrivateIP":"Returns true if the input is a valid private IPv4 address", "description_isPublicIP":"Returns true if the input is a valid public IPv4 address", "description_isNull":"Takes a single parameter and returns true if the value is null", "description_isEmpty":"Takes a single string and returns true if the string is null or empty", "description_isBlank":"Takes a single string and returns true if the string is null, empty, or whitespace", "description_isNumeric":"Returns true iff the input string is a number", "description_floor":"Rounds down a single value to the largest previous integer value", "description_ceil":"Rounds up a single value to the smallest integer value", "description_join":"SQL-like join that combines fields from two or more queries by using values common to each", "description_parse_xml":"Extract values from XML using Xpath", "description_parse_xml_nodrop":"Extract values from XML using Xpath and include messages that don\'t match", "description_csv":"Extract individual fields from a CSV record", "description_split":"Extract individual fields from a delimiter separated record", "description_luhn":"Validate a number as a credit card number using Luhn\'s algorithm", "description_format":"Formats data into a string", "description_concat":"Concatenates strings, numbers and fields", "description_toLowerCase":"Converts all the characters of a string to lower case", "description_toUpperCase":"Converts all the characters of a string to upper case", "description_ipv4ToNumber":"Converts IP address to decimal", "description_replace":"Replaces all matches found for given pattern with another string", "description_substring":"Returns a substring given a start offset and an optional end offset", "description_transaction":"Analyzes sequences of related logs", "description_transactionize":"Groups logs by given fields; optionally executes a subquery in every group", "description_formatDate":"Returns formatted date and time", "description_now":"Returns the current time in milliseconds", "description_length":"Returns the number of characters in a string", "description_parseHex":"Converts a hex string of 16 or fewer characters to a long; legacy method for hexToDec", "description_fillmissing":"Fills missing rows in the output", "description_compare":"Runs the same query from a time in the past and compares results", "description_queryTimeRange":"Calculates the time range of a message from start to end.", "description_queryStartTime":"Calculates the start time of a message.", "description_queryEndTime":"Calculates the end time of a message.", "description_urlencode":"Encodes the URL into ASCII character set", "description_tourl":"Provides you the ability to assign a short name that describes the URL", "description_hexToDec":"Converts hexadecimal string of 16 or fewer characters to long using Two\'s Complement for negative values", "description_decToHex":"Converts long of 16 or fewer digits to hexadecimal string using Two\'s Complement for negative values", "description_contains":"Takes two search fields and returns True if field2 exists in field1, or if both are empty", "description_base64Encode":"Provides Base64 encoding of a string", "description_base64Decode":"Provides Base64 decoding of a string that handles URL-safe and normal mode", "description_trim":"Eliminates leading and trailing spaces from a string field", "description_haversine":"Given the latitude/longitude values of two points, returns the distance between them in kilometers", "description_hexToAscii":"Converts hexadecimal string to ASCII string", "description_filter":"Filters the output of a search based on filtering criteria of a subquery", "example_sourceCategory":""}
{"example_sourceHost":"", "example_sourceName":"", "example_collector":"", "example_source":"", "example_parse":"| parse \"[ip address=*] [data center=*]\" as ip, data_center\n| parse \"user=*,\" as user nodrop\n| parse using public/apache\n| parse using public/apache nodrop", "example_parse_regex":"| parse regex \"(?<src_ip>\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})\"", "example_extract":"| extract \"(?<src_ip>\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})\"", "example_where":"| where time >= 10\n| where [subquery: error | count by _sourceCategory | compose _sourceCategory] ", "example_count":"| count by _sourceCategory\n| count by _sourceHost | sort by _count", "example_count_distinct":"| count_distinct(username) group by hostname", "example_count_frequent":"* | parse \"srcIP=*, url=*\" as srcIP, url | count_frequent srcIP, url", "example_sum":"| parse \"bytes_sent=*\" as bytes | sum(bytes) as total_bytes_sent\n| parse \"filesize=*\" as filesize | sum(filesize) by _sourceHost", "example_avg":"_sourceCategory=apache | parse \" 200 * \" as size | avg(size)\n| parse \"response_time=*\" as latency | avg(latency) as average_latency by _sourceHost", "example_stddev":"| stddev(request_received) group by hour", "example_last":"| last(status_code) group by _sourceHost", "example_first":"| first(status_code) group by _sourceHost", "example_max":"| max(latency)\n| max(request_received) as maximum_request_received by _timeslice", "example_min":"| min(latency)\n| min(request_received) as minimum_request_received by _timeslice", "example_pct":"| pct(latency, 95)\n| pct(request_received, 99) as 99th_percentile_request_received\n| pct(request_received, 50, 95, 99) by _timeslice", "example_sort":"| parse \"GET * \" as url | count by url | sort by _count\n| sort by _count asc", "example_order":"| parse \"GET * \" as url | count by url | order by _count\n| order by _count asc", "example_top":"| count user | top 2 user by _count", "example_topk":"| topk(#, <sort_fields>) [by Group_by_fields]", "example_compose":"| compose user_id\n| compose source_ip, port", "example_limit":"error 404 | extract \"From: (?<from>.*) To: (?<to>.*)\"| limit 20", "example_timeslice":"|  timeslice 5m | count by _timeslice\n| timeslice 1h | sum(bytes_received) by _timeslice\n| timeslice 1d | max(latency) as maximum_latency by _timeslice", "example_diff":"| diff memory as dmemory by _sourceHost", "example_accum":"| accum memory as tot_memory by _sourceHost", "example_total":"| total memory as tot_memory by _sourceHost", "example_summarize":"error or fail* | summarize\n| parse \"message: *\" as msg | summarize field=msg", "example_logreduce":"error or fail* | logreduce\n| parse \"message: *\" as msg | logreduce field=msg", "example_logcompare":"error or fail* | logcompare timeshift -1d", "example_predict":"| timeslice 1m | count by _timeslice | predict _count by 1m", "example_outlier":"| timeslice 1m | count by _timeslice | sort + _timeslice | outlier _count", "example_smooth":"| smooth data as sdata by _sourcehost", "example_rollingstd":"| rollingstd data as data_std by _sourcehost", "example_backshift":"| backshift data as data_lag by _sourcehost", "example_keyvalue":"* | keyvalue regex \",(.*?)=(.*?),\" keys \"key1\", \"key2\"", "example_keyvalue_auto":"* | keyvalue auto", "example_Value\"", "example_lookup":"| lookup userName from https://foo.bar.csv on userId=Id\n| lookup * from folder/file on Ip\n| lookup userName as name, _count as c, userRole as role, phone from https://foo.bar.json on ID=ID, orgName=organization\n| lookup type, actor, raw, threatlevel from sumo://threat/cs on threat={ip}\n| lookup latitude, longitude, country_name, region, city from geo://location on ip = remote_ip //remote_ip is your dataset ip\n| lookup asn, organization from asn://default on ip={ip}", "example_fields":"* | parse using public/apache | fields method, status_code\n| fields - unwanted_field", "example_cat":"cat /foo/bar | where baz = \"hello\"", "example_save":"error | timeslice 1h | save myFolder/mySubFolder/errors/by-timeslice", "example_json":"* | json \"fields.timestamp\" | count by %fields.timestamp\n* | json field=jsonobject \"source\", \"fields.timestamp\" | where source = \"", "example_transpose":"error | timeslice  1m | count by _timeslice, _sourcehost | transpose row _timeslice column _sourcehost", "example_urldecode":"| urldecode(paramval) as decoded", "example_getCIDRPrefix":"| parse \"ip=*]\" as ip_address | getCIDRPrefix(ip_address, toInt(23)) as prefix", "example_compareCIDRPrefix":"| compareCIDRPrefix(\"192.168.0.1\", \"10.2.4.111\", toInt(23)) as re | count by re ", "example_maskFromCIDR":"| maskFromCIDR(toInt(23)) as s", "example_isValidIP":"| isValidIP(dest_host) as isValid", "example_isValidIPv4":"| isValidIPv4(dest_host) as isValid", "example_isValidIPv6":"| isValidIPv6(dest_host) as isValid", "example_isPrivateIP":"| isPrivateIP(dest_host) as isPrivate", "example_isPublicIP":"| isPublicIP(dest_host) as isPublic", "example_isNull":"* | isNull(_sourceCategory) as sc_is_null", "example_isEmpty":"* | isEmpty(_sourceCategory) as sc_is_empty", "example_isBlank":"* | isBlank(_sourceCategory) as sc_is_blank", "example_isNumeric":"* | isNumeric(num) as isNum", "example_floor":"floor(1.5) as v // v = 1", "example_ceil":"ceil(1.5) as v // v = 2", "example_join":"* | join (parse \"login userID=*\" as user) as t1, (parse \"logout userID=*\" as user) as t2 on t1.user = t2.user timewindow 10m", "example_parse_xml":"* | parse XML \"/root/@attribute\" as attribute", "example_csv":"* | parse \"query=[*], queryId\" as query | csv query extract op1, op2, op3", "example_split":"*| parse \"query=[*], queryId\" as query | split query escape=\'\\\', delim=\':\', quote=\'\'\' extract op1, op2, op3", "example_luhn":" luhn(maybe_credit_card) as isValid", "example_format":"format(\"%.2f\", avg_val) as formatted_val", "example_concat":"concat(subnet_addr, host_addr) as ip_addr", "example_toLowerCase":"toLowerCase(\"\"ERROR\"\") as err", "example_toUpperCase":"toUpperCase(\"\"error\"\") as err", "example_ipv4ToNumber":"*| parse \"[remote_ip=*]\" as ip, ipv4ToNumber(ip) as dec_ip", "example_replace":"*| parse \"[hostId=*]\" as hostId | replace(hostId, \"-\", \" \") as newHostId \n | replace(filename, /[0-9]/, \"\") as filename", "example_substring":"| substring(big_string, start_offset[, end_offset]) as little_string", "example_transaction":"| transaction on ip with states login, checkout, ... in step\n| transaction on ip with states login, checkout, ... in step results by states\n| transaction on ip with states login, checkout, ... in step results by flow", "example_transactionize":"| transactionize field1, field2, field3\n| transactionize field1, field2, field3 (sort by _messagetime | diff _messagetime)", "example_formatDate":"* | formatDate(_messageTime, \"yy-MM-dd HH:mm\") as date", "example_now":"* | now() as time", "example_length":"length(field) as field_length", "example_parseHex":"parseHex(\"00000000CAFEBABE\") as v // v = 3405691582", "example_fillmissing":"| timeslice 15m | count by _timeslice | fillmissing timeslice(15m) \n| timeslice 15m as _ts | count by _ts, _sourceHost | fillmissing timeslice(15m) in _ts, values(\"a\", \"b\") in _sourceHost \n| timeslice 1h | count by _timeslice | fillmissing timeslice(1h) with 99 for f1, null for f2, \"NA\" for f3", "example_compare":"| timeslice 1m | count by _timeslice | compare with timeshift 1d\n| timeslice 1m | count by _timeslice | compare with timeshift 1d 7\n| timeslice 1m | count by _timeslice | compare with timeshift 6h 4 avg", "example_queryTimeRange":"| queryTimeRange() as <alias>", "example_queryStartTime":"| queryStartTime() as <alias>", "example_queryEndTime":"| queryEndTime() as <alias>", "example_urlencode":"| kv \"html_url\" as url | urlencode(url)", "example_tourl":"| tourl(\"https://www.sumologic.net/ui/#section/search/abcdefghijklemopqrst\", \"Akamai Denials by Host\") as Akamai", "example_hexToDec":"hexToDec(\"1337\") as v // v = 4919", "example_decToHex":"decToHex(\"4919\") as v // v = 1337", "example_contains":"| where environment contains development \n | where contains(environment, development)", "example_base64Encode":"base64Encode(\"hello world\") as b64", "example_base64Decode":"base64Decode(\"aGVsbG8gd29ybGQ=\") as v // v = hello world", "example_trim":"| trim(field) as trimmed_field", "example_haversine":"| haversine(latitude1, longitude1, latitude2, longitude2) as distanceKms", "example_hexToAscii":"hexToAscii(\"74657374\") as v //  v = test", "example_filter":"_sourceCategory=HttpServers | count by _sourceHost | filter _sourceHost in (outlier _count by _sourceHost | where _count_violation"

}
